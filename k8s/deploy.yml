#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")

#@ if data.values.namespace.create:
apiVersion: v1
kind: Namespace
metadata:
  name: #@ data.values.namespace.name
#@ end
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: educateshub
  namespace: #@ data.values.namespace.name
data:
  application.yaml: #@ yaml.encode(data.values.application_yaml)

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: educateshub
  namespace: #@ data.values.namespace.name
spec:
  replicas: #@ data.values.replicas
  selector:
    matchLabels:
      app: educateshub
  template:
    metadata:
      labels:
        app: educateshub
    spec:
      terminationGracePeriodSeconds: 0
      containers:
        - name: educateshub
          image: #@ data.values.image.name
          imagePullPolicy: Always
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - containerPort: 8080
          readinessProbe:
            initialDelaySeconds: 2
            periodSeconds: 1
            timeoutSeconds: 1
            failureThreshold: 1
            successThreshold: 1
            httpGet:
              path: /actuator/health/readiness
              port: 8080
              scheme: HTTP
          livenessProbe:
            initialDelaySeconds: 1
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 3
            successThreshold: 1
            httpGet:
              path: /actuator/health/liveness
              port: 8080
              scheme: HTTP
          volumeMounts:
            - name: educateshub-config
              mountPath: /application/config/hub/
      volumes:
        - name: educateshub-config
          configMap:
            name: educateshub
---
apiVersion: v1
kind: Service
metadata:
  name: educateshub
  namespace: #@ data.values.namespace.name
  labels:
    app: educateshub
spec:
  type: ClusterIP
  ports:
    - name: educateshub
      port: 8080
  selector:
    app: educateshub

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-educateshub
  namespace: #@ data.values.namespace.name
  #@ if/end hasattr(data.values.tls_secret, "name") and hasattr(data.values.tls_secret, "namespace") and data.values.tls_secret.name and data.values.tls_secret.namespace:
  annotations:
    projectcontour.io/tls-cert-namespace: #@ data.values.tls_secret.namespace
spec:
  rules:
    - host: #@ data.values.host
      http:
        paths:
          - backend:
              service:
                name: educateshub
                port:
                  number: 8080
            path: /
            pathType: Prefix
  #@ if/end hasattr(data.values.tls_secret, "name") and hasattr(data.values.tls_secret, "namespace") and data.values.tls_secret.name and data.values.tls_secret.namespace:
  tls:
    - hosts:
        -  #@ data.values.host
      secretName: #@ data.values.tls_secret.name
